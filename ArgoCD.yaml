Add ArgoCD to kubernetes cluster
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
exposing the service over the net
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
checking if the service is successefuly exposed
kubectl get svc -n argocd
NOTE: This is not recommended in production environments. Only use in a lab or dev environment. In production environments, it is recommended to use an ingress for the Argo CD API server that is secured.
to login to the ui we should get the password using the following command
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
after that we should create a webhoook in the code source repo referencing the ip of the argoCD http://argocd_ip/api/webhook if we add the secret we should also add it in the config files of argocd
this is the argoCD application configurations file in which we specify the code repo which we want argoCD to connect and the target cluster and namespace where to apply those changes
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: guestbook
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/argoproj/argocd-example-apps.git
    targetRevision: HEAD
    path: /
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    syncOptions:
      - createNamespace=true
    automated:
      selfHeal: true
      prune: true





K8s NOTE:
to have prometheus scrape the custom metrics exposed by pods at :80/data/metrics, add these annotations to the pods deployment configurations:
metadata:
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/data/metrics'
    prometheus.io/port: '80'
